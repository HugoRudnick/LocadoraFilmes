{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projetos\\\\react-app\\\\src\\\\Components\\\\GeneroForms.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Grid, TextField, withStyles, FormControl, InputLabel, Select, MenuItem, Button, FormHelperText } from '@material-ui/core';\nimport useForm from \"./useForm\";\nimport { connect } from 'react-redux';\nimport * as actions from '../Actions/generos';\nimport { useToasts } from 'react-toast-notifications';\n\nconst styles = theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      minWidth: 230\n    }\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 230\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  }\n});\n\nconst initialFieldValues = {\n  nome: '',\n  dataCriacao: '' // situacao\n\n};\n\nconst GenerosForms = ({\n  classes,\n  ...props\n}) => {\n  //toast  \n  const {\n    addToast\n  } = useToasts(); //validação de campos\n\n  const validate = (fieldValues = values) => {\n    let temp = { ...errors\n    }; // if('usuario' in fieldValues)\n    //     temp.usuario = fieldValues.usuario? \"\" : \"Campo Obrigatório.\"\n    // // if(!fieldValues.senha)\n    // //     temp.senha = fieldValues.senha? \"\" : \"Campo Obrigatório.\"\n    // if('senha' in fieldValues)\n    // temp.senha = fieldValues.senha? \"\" : \"Campo Obrigatório.\"\n\n    setErrors({ ...temp\n    }); // if(fieldValues == values){\n    //     return Object.values(temp).every(x => x == \"\")\n    // }\n  };\n\n  const {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  } = useForm(initialFieldValues, validate, props.setCurrentId);\n\n  const handleSubmit = e => {\n    e.preventDefault(); //  if(validate()) {\n\n    const onSuccess = () => {\n      resetForm();\n      addToast(\"Submitted successfully\", {\n        appearance: 'success'\n      });\n    };\n\n    if (props.currentId == 0) {\n      props.createGeneros(values, onSuccess);\n    } else {\n      props.updateGenero(props.currentId, values, onSuccess);\n    } //  }\n\n  };\n\n  useEffect(() => {\n    console.log(props.currentId);\n\n    if (props.currentId != 0) {\n      setValues({ ...props.generoList.find(genero => genero.id == props.currentId)\n      });\n      setErrors({});\n    }\n  }, [props.currentId]);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    autoComplete: \"off\",\n    noValidate: true,\n    className: classes.root,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    Item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    name: \"nome\",\n    variant: \"outlined\",\n    label: \"Nome\",\n    value: values.nome,\n    onChange: handleInputChange\n  }, errors.nome && {\n    error: true,\n    helperText: errors.nome\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(TextField, Object.assign({\n    disabled: true,\n    name: \"dataCriacao\",\n    id: \"outlined-disabled\",\n    variant: \"outlined\",\n    label: \"Data cria\\xE7\\xE3o\",\n    type: \"date\",\n    value: values.dataCriacao,\n    onChange: handleInputChange\n  }, errors.dataCriacao && {\n    error: true,\n    helperText: errors.dataCriacao\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    className: classes.smMargin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(\"button\", {\n    variant: \"contained\",\n    className: classes.smMargin,\n    onClick: resetForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, \"Reset\")))));\n};\n\nconst mapStateToProps = state => ({\n  generoList: state.genero.list\n});\n\nconst mapActionToProps = {\n  createGeneros: actions.create,\n  updateGenero: actions.update\n};\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(GenerosForms));","map":{"version":3,"sources":["C:/Projetos/react-app/src/Components/GeneroForms.js"],"names":["React","useState","useEffect","Grid","TextField","withStyles","FormControl","InputLabel","Select","MenuItem","Button","FormHelperText","useForm","connect","actions","useToasts","styles","theme","root","margin","spacing","minWidth","formControl","smMargin","initialFieldValues","nome","dataCriacao","GenerosForms","classes","props","addToast","validate","fieldValues","values","temp","errors","setErrors","setValues","handleInputChange","resetForm","setCurrentId","handleSubmit","e","preventDefault","onSuccess","appearance","currentId","createGeneros","updateGenero","console","log","generoList","find","genero","id","error","helperText","mapStateToProps","state","list","mapActionToProps","create","update"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Grid, TextField, withStyles, FormControl, InputLabel, Select, MenuItem, Button, FormHelperText } from '@material-ui/core';\r\nimport useForm from \"./useForm\";\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../Actions/generos'\r\nimport { useToasts } from 'react-toast-notifications'\r\n\r\nconst styles = theme =>({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        }\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n    smMargin:{\r\n        margin: theme.spacing(1)\r\n    }\r\n})\r\n\r\nconst initialFieldValues ={\r\n    nome : '',\r\n    dataCriacao : ''\r\n    // situacao\r\n}\r\n\r\nconst GenerosForms = ({ classes, ...props }) => {\r\n\r\n    //toast  \r\n    const { addToast } = useToasts()\r\n\r\n    //validação de campos\r\n const validate = (fieldValues = values) => {\r\n    let temp = { ...errors }\r\n    // if('usuario' in fieldValues)\r\n    //     temp.usuario = fieldValues.usuario? \"\" : \"Campo Obrigatório.\"\r\n    // // if(!fieldValues.senha)\r\n    // //     temp.senha = fieldValues.senha? \"\" : \"Campo Obrigatório.\"\r\n    // if('senha' in fieldValues)\r\n    // temp.senha = fieldValues.senha? \"\" : \"Campo Obrigatório.\"\r\n    setErrors({\r\n        ...temp\r\n    })\r\n\r\n    // if(fieldValues == values){\r\n    //     return Object.values(temp).every(x => x == \"\")\r\n    // }\r\n\r\n }\r\n   \r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    } = useForm(initialFieldValues, validate, props.setCurrentId)\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        //  if(validate()) {\r\n            const onSuccess = () => { \r\n                resetForm()\r\n                addToast(\"Submitted successfully\", { appearance: 'success' })\r\n            }\r\n            if(props.currentId == 0 ){\r\n                 props.createGeneros(values, onSuccess)\r\n            }else{\r\n                props.updateGenero(props.currentId,values, onSuccess)\r\n            }    \r\n            \r\n        //  }\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(props.currentId)\r\n        if(props.currentId != 0) {\r\n            setValues({\r\n                ...props.generoList.find(genero => genero.id == props.currentId)\r\n            })\r\n            setErrors({})\r\n        }\r\n    }, [props.currentId])\r\n\r\n\r\n    return (\r\n    <form autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n      <Grid container>\r\n        <Grid Item xs ={6}>\r\n            <TextField\r\n                name= \"nome\"\r\n                variant = \"outlined\"\r\n                label=\"Nome\"\r\n                value={values.nome}\r\n                onChange={handleInputChange}\r\n                {...(errors.nome && { error: true, helperText: errors.nome })}\r\n                \r\n            />\r\n            <TextField\r\n            disabled\r\n                name= \"dataCriacao\"\r\n                id=\"outlined-disabled\"  \r\n                variant = \"outlined\"\r\n                label=\"Data criação\"\r\n                type=\"date\"\r\n                value={values.dataCriacao}\r\n                onChange={handleInputChange}\r\n                {...(errors.dataCriacao && { error: true, helperText: errors.dataCriacao })}\r\n                \r\n            />\r\n            {/* campo situacao */}\r\n            \r\n            {/* <TextField\r\n                name= \"senha\"\r\n                variant = \"outlined\"\r\n                label=\"Senha\"\r\n                type=\"password\"\r\n                value={values.senha}\r\n                onChange={handleInputChange}\r\n                {...(errors.senha && { error: true, helperText: errors.senha })}\r\n            /> */}\r\n            <div>\r\n                <button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    className={classes.smMargin}                \r\n                >\r\n                    Submit\r\n                </button>\r\n\r\n                <button\r\n                    variant=\"contained\"\r\n                    className={classes.smMargin}                \r\n                    onClick={resetForm}\r\n                >\r\n                    Reset\r\n                </button>\r\n\r\n\r\n            </div>\r\n        </Grid>\r\n      </Grid>\r\n\r\n    </form>\r\n  )\r\n}\r\nconst mapStateToProps = state => ({\r\n    generoList: state.genero.list\r\n})\r\n  \r\n  const mapActionToProps = {\r\n    createGeneros: actions.create,\r\n    updateGenero: actions.update\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(GenerosForms));\r\n"]},"metadata":{},"sourceType":"module"}